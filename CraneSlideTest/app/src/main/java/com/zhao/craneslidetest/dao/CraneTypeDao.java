package com.zhao.craneslidetest.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhao.craneslidetest.beans.CraneType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRANE_TYPE".
*/
public class CraneTypeDao extends AbstractDao<CraneType, Long> {

    public static final String TABLENAME = "CRANE_TYPE";

    /**
     * Properties of entity CraneType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TimeStamp = new Property(1, long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property CraneType = new Property(2, String.class, "craneType", false, "CRANE_TYPE");
        public final static Property CraneNum = new Property(3, String.class, "craneNum", false, "CRANE_NUM");
        public final static Property RateQty = new Property(4, int.class, "rateQty", false, "RATE_QTY");
        public final static Property MiniSpeed = new Property(5, float.class, "miniSpeed", false, "MINI_SPEED");
        public final static Property Inspectors = new Property(6, String.class, "inspectors", false, "INSPECTORS");
        public final static Property RunSpeed = new Property(7, String.class, "runSpeed", false, "RUN_SPEED");
        public final static Property StopDistance = new Property(8, String.class, "stopDistance", false, "STOP_DISTANCE");
        public final static Property StopDecrease = new Property(9, String.class, "stopDecrease", false, "STOP_DECREASE");
        public final static Property TestResult = new Property(10, String.class, "testResult", false, "TEST_RESULT");
    }


    public CraneTypeDao(DaoConfig config) {
        super(config);
    }
    
    public CraneTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRANE_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 1: timeStamp
                "\"CRANE_TYPE\" TEXT," + // 2: craneType
                "\"CRANE_NUM\" TEXT," + // 3: craneNum
                "\"RATE_QTY\" INTEGER NOT NULL ," + // 4: rateQty
                "\"MINI_SPEED\" REAL NOT NULL ," + // 5: miniSpeed
                "\"INSPECTORS\" TEXT," + // 6: inspectors
                "\"RUN_SPEED\" TEXT," + // 7: runSpeed
                "\"STOP_DISTANCE\" TEXT," + // 8: stopDistance
                "\"STOP_DECREASE\" TEXT," + // 9: stopDecrease
                "\"TEST_RESULT\" TEXT);"); // 10: testResult
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRANE_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CraneType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTimeStamp());
 
        String craneType = entity.getCraneType();
        if (craneType != null) {
            stmt.bindString(3, craneType);
        }
 
        String craneNum = entity.getCraneNum();
        if (craneNum != null) {
            stmt.bindString(4, craneNum);
        }
        stmt.bindLong(5, entity.getRateQty());
        stmt.bindDouble(6, entity.getMiniSpeed());
 
        String inspectors = entity.getInspectors();
        if (inspectors != null) {
            stmt.bindString(7, inspectors);
        }
 
        String runSpeed = entity.getRunSpeed();
        if (runSpeed != null) {
            stmt.bindString(8, runSpeed);
        }
 
        String stopDistance = entity.getStopDistance();
        if (stopDistance != null) {
            stmt.bindString(9, stopDistance);
        }
 
        String stopDecrease = entity.getStopDecrease();
        if (stopDecrease != null) {
            stmt.bindString(10, stopDecrease);
        }
 
        String testResult = entity.getTestResult();
        if (testResult != null) {
            stmt.bindString(11, testResult);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CraneType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getTimeStamp());
 
        String craneType = entity.getCraneType();
        if (craneType != null) {
            stmt.bindString(3, craneType);
        }
 
        String craneNum = entity.getCraneNum();
        if (craneNum != null) {
            stmt.bindString(4, craneNum);
        }
        stmt.bindLong(5, entity.getRateQty());
        stmt.bindDouble(6, entity.getMiniSpeed());
 
        String inspectors = entity.getInspectors();
        if (inspectors != null) {
            stmt.bindString(7, inspectors);
        }
 
        String runSpeed = entity.getRunSpeed();
        if (runSpeed != null) {
            stmt.bindString(8, runSpeed);
        }
 
        String stopDistance = entity.getStopDistance();
        if (stopDistance != null) {
            stmt.bindString(9, stopDistance);
        }
 
        String stopDecrease = entity.getStopDecrease();
        if (stopDecrease != null) {
            stmt.bindString(10, stopDecrease);
        }
 
        String testResult = entity.getTestResult();
        if (testResult != null) {
            stmt.bindString(11, testResult);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CraneType readEntity(Cursor cursor, int offset) {
        CraneType entity = new CraneType( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // timeStamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // craneType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // craneNum
            cursor.getInt(offset + 4), // rateQty
            cursor.getFloat(offset + 5), // miniSpeed
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inspectors
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // runSpeed
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // stopDistance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // stopDecrease
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // testResult
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CraneType entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTimeStamp(cursor.getLong(offset + 1));
        entity.setCraneType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCraneNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRateQty(cursor.getInt(offset + 4));
        entity.setMiniSpeed(cursor.getFloat(offset + 5));
        entity.setInspectors(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRunSpeed(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStopDistance(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStopDecrease(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTestResult(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CraneType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CraneType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CraneType entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
